#!/usr/bin/env ansible-playbook
---
- name: Install a metal worker
  become: false
  connection: local
  hosts: localhost
  gather_facts: false
  vars:
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    machineset_instance_type: m5.metal
    machineset_machine_role: worker
    machineset_machine_type: worker
    machineset_name: metal-worker
    machineset_node_labels:
      node-role.kubernetes.io/worker: ""
    machineset_replicas: 1
    machineset_user_data_secret: worker-user-data
    machineset_user_data_namespace: openshift-machine-api
  tasks:
    - name: Query Cluster Infrastructure Name
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Infrastructure
        name: cluster
      register: cluster_info

    - name: Assert Platform is AWS
      ansible.builtin.assert:
        fail_msg: Platform for OpenShift cluster must be AWS!
        that:
          - cluster_info.resources[0].status.platform == "AWS"

    - name: Query MachineSets
      kubernetes.core.k8s_info:
        api_version: machine.openshift.io/v1beta1
        kind: MachineSet
        namespace: openshift-machine-api
      register: cluster_machinesets

    - name: Set Dynamic MachineSet Facts
      ansible.builtin.set_fact:
        infrastructure_name: "{{ cluster_info.resources[0].status.infrastructureName }}"
        infrastructure_region: "{{ cluster_info.resources[0].status.platformStatus.aws.region }}"

    - name: Define template for creating machineset
      ansible.builtin.set_fact:
        machineset_yaml: |
          ---
          {% for res in cluster_machinesets.resources %}
          - apiVersion: machine.openshift.io/v1beta1
            kind: MachineSet
            metadata:
              labels:
                machine.openshift.io/cluster-api-cluster: "{{ infrastructure_name }}"
                edge-gitops-role: kubevirt-worker
              name: "{{ infrastructure_name }}-{{ machineset_name }}-{{ res.spec.template.spec.providerSpec.value.placement.availabilityZone }}"
              namespace: openshift-machine-api
            spec:
              replicas: {{ machineset_replicas | int }}
              selector:
                matchLabels:
                  machine.openshift.io/cluster-api-cluster: "{{ infrastructure_name }}"
                  machine.openshift.io/cluster-api-machineset: "{{ infrastructure_name }}-{{ machineset_name }}-{{ res.spec.template.spec.providerSpec.value.placement.availabilityZone }}"
              template:
                metadata:
                  labels:
                    machine.openshift.io/cluster-api-cluster: "{{ infrastructure_name }}"
                    machine.openshift.io/cluster-api-machine-role: "{{ machineset_machine_role }}"
                    machine.openshift.io/cluster-api-machine-type: "{{ machineset_machine_type }}"
                    machine.openshift.io/cluster-api-machineset: "{{ infrastructure_name }}-{{ machineset_name }}-{{ res.spec.template.spec.providerSpec.value.placement.availabilityZone }}"
                spec:
                  metadata:
                    labels: {{ machineset_node_labels }}
                  providerSpec:
                    value:
                      ami:
                        id: "{{ res.spec.template.spec.providerSpec.value.ami.id }}"
                      apiVersion: awsproviderconfig.openshift.io/v1beta1
                      blockDevices: {{ res.spec.template.spec.providerSpec.value.blockDevices }}
                      credentialsSecret:
                        name: aws-cloud-credentials
                      deviceIndex: 0
                      iamInstanceProfile:
                        id: "{{ infrastructure_name }}-worker-profile"
                      instanceType: "{{ machineset_instance_type }}"
                      kind: AWSMachineProviderConfig
                      placement:
                        availabilityZone: "{{ res.spec.template.spec.providerSpec.value.placement.availabilityZone }}"
                        region: "{{ infrastructure_region }}"
                      securityGroups: {{ res.spec.template.spec.providerSpec.value.securityGroups }}
                      subnet:
                        filters:
                          - name: tag:Name
                            values:
                              - "{{ res.spec.template.spec.providerSpec.value.subnet.filters[0]['values'][0] }}"
                      tags: {{ res.spec.template.spec.providerSpec.value.tags }}
                      userDataSecret:
                        name: "{{ machineset_user_data_secret }}"
                        namespace: "{{ machineset_user_data_namespace }}"
          {% endfor %}

    - name: Get definitions
      ansible.builtin.set_fact:
        machineset_definitions: "{{ machineset_yaml | from_yaml }}"

    - name: Create MachineSet
      kubernetes.core.k8s:
        definition: "{{ item }}"
        state: present
      loop: "{{ machineset_definitions }}"
